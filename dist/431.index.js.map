{"version":3,"file":"431.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAaA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AC1KA;;;;;;;;;;;AAWA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrDA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;AClBA;;;;;;;;;;;AAWA;AAEA;AAoDA;;;;;;;;;;;;;;ACjEA;;;;;;;;;;;AAWA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././src/helpers/check-merge-safety.ts",".././src/helpers/set-commit-status.ts",".././src/octokit.ts",".././src/types/generated.ts",".././src/utils/paginate-open-pull-requests.ts"],"sourcesContent":["/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { HelperInputs } from '../types/generated';\nimport { context as githubContext } from '@actions/github';\nimport { octokit } from '../octokit';\nimport micromatch from 'micromatch';\nimport { PullRequest } from '../types/github';\nimport { paginateAllOpenPullRequests } from '../utils/paginate-open-pull-requests';\nimport { map } from 'bluebird';\nimport { setCommitStatus } from './set-commit-status';\nimport * as core from '@actions/core';\n\nconst maxBranchNameLength = 50;\nexport class CheckMergeSafety extends HelperInputs {\n  context?: string;\n  paths?: string;\n  ignore_globs?: string;\n  override_filter_paths?: string;\n  override_filter_globs?: string;\n}\n\nexport const checkMergeSafety = async (inputs: CheckMergeSafety) => {\n  const isPrWorkflow = Boolean(githubContext.issue.number);\n  if (!isPrWorkflow) {\n    return handlePushWorkflow(inputs);\n  }\n  const { data: pullRequest } = await octokit.pulls.get({ pull_number: githubContext.issue.number, ...githubContext.repo });\n\n  const { state, message } = await setMergeSafetyStatus(pullRequest, inputs);\n  if (state === 'failure') {\n    core.setFailed(message);\n  }\n};\n\nconst setMergeSafetyStatus = async (pullRequest: PullRequest, { context = 'Merge Safety', ...inputs }: CheckMergeSafety) => {\n  const { state, message } = await getMergeSafetyStateAndMessage(pullRequest, inputs);\n  const hasExistingFailureStatus = await checkForExistingFailureStatus(pullRequest, context);\n  if (hasExistingFailureStatus && state === 'failure') {\n    const {\n      head: {\n        ref,\n        user: { login: username }\n      }\n    } = pullRequest;\n    const truncatedRef = ref.length > maxBranchNameLength ? `${ref.substring(0, maxBranchNameLength)}...` : ref;\n    const truncatedBranchName = `${username}:${truncatedRef}`;\n    core.info(`Found existing failure status for ${truncatedBranchName}, skipping setting new status`);\n  } else {\n    await setCommitStatus({\n      sha: pullRequest.head.sha,\n      state,\n      context,\n      description: message,\n      ...githubContext.repo\n    });\n  }\n\n  return { state, message };\n};\n\nconst handlePushWorkflow = async (inputs: CheckMergeSafety) => {\n  const pullRequests = await paginateAllOpenPullRequests();\n  const filteredPullRequests = pullRequests.filter(({ base, draft }) => !draft && base.ref === base.repo.default_branch);\n  await map(filteredPullRequests, pullRequest => setMergeSafetyStatus(pullRequest as PullRequest, inputs));\n};\n\nconst checkForExistingFailureStatus = async (pullRequest: PullRequest, context: string) => {\n  const { data } = await octokit.repos.getCombinedStatusForRef({\n    ...githubContext.repo,\n    ref: pullRequest.head.sha\n  });\n  if (data.state === 'failure') {\n    const existingContext = data.statuses.find(status => status.context === context);\n    return Boolean(existingContext);\n  }\n  return false;\n};\n\nconst getMergeSafetyStateAndMessage = async (\n  pullRequest: PullRequest,\n  { paths, ignore_globs, override_filter_paths, override_filter_globs }: CheckMergeSafety\n) => {\n  const {\n    base: {\n      repo: {\n        default_branch,\n        owner: { login: baseOwner }\n      }\n    },\n    head: {\n      ref,\n      user: { login: username }\n    }\n  } = pullRequest;\n\n  const branchName = `${username}:${ref}`;\n  const truncatedRef = ref.length > maxBranchNameLength ? `${ref.substring(0, maxBranchNameLength)}...` : ref;\n  const truncatedBranchName = `${username}:${truncatedRef}`;\n\n  const {\n    data: { files: filesWhichBranchIsBehindOn }\n  } = await octokit.repos.compareCommitsWithBasehead({\n    ...githubContext.repo,\n    basehead: `${branchName}...${baseOwner}:${default_branch}`\n  });\n  const fileNamesWhichBranchIsBehindOn = filesWhichBranchIsBehindOn?.map(file => file.filename) ?? [];\n\n  const globalFilesOutdatedOnBranch = override_filter_globs\n    ? micromatch(fileNamesWhichBranchIsBehindOn, override_filter_globs.split(/[\\n,]/))\n    : override_filter_paths\n      ? fileNamesWhichBranchIsBehindOn.filter(changedFile => override_filter_paths.split(/[\\n,]/).includes(changedFile))\n      : [];\n\n  if (globalFilesOutdatedOnBranch.length) {\n    core.error(buildErrorMessage(globalFilesOutdatedOnBranch, 'global files', truncatedBranchName));\n    return {\n      state: 'failure',\n      message: `This branch has one or more outdated global files. Please update with ${default_branch}.`\n    } as const;\n  }\n\n  const {\n    data: { files: changedFiles }\n  } = await octokit.repos.compareCommitsWithBasehead({\n    ...githubContext.repo,\n    basehead: `${baseOwner}:${default_branch}...${branchName}`\n  });\n  const changedFileNames = changedFiles?.map(file => file.filename);\n  const changedFilesToIgnore = changedFileNames && ignore_globs ? micromatch(changedFileNames, ignore_globs.split(/[\\n,]/)) : [];\n  const filteredFileNames = changedFileNames?.filter(file => !changedFilesToIgnore.includes(file));\n  const allProjectDirectories = paths?.split(/[\\n,]/);\n\n  const changedProjectsOutdatedOnBranch = allProjectDirectories?.filter(\n    dir => fileNamesWhichBranchIsBehindOn.some(file => file.includes(dir)) && filteredFileNames?.some(file => file.includes(dir))\n  );\n\n  if (changedProjectsOutdatedOnBranch?.length) {\n    core.error(buildErrorMessage(changedProjectsOutdatedOnBranch, 'projects', truncatedBranchName));\n    return {\n      state: 'failure',\n      message: `This branch has one or more outdated projects. Please update with ${default_branch}.`\n    } as const;\n  }\n\n  const safeMessage = buildSuccessMessage(truncatedBranchName);\n  core.info(safeMessage);\n  return {\n    state: 'success',\n    message: safeMessage\n  } as const;\n};\n\nconst buildErrorMessage = (paths: string[], pathType: 'projects' | 'global files', branchName: string) =>\n  `\nThe following ${pathType} are outdated on branch ${branchName}\n\n${paths.map(path => `* ${path}`).join('\\n')}\n`;\n\nconst buildSuccessMessage = (branchName: string) => `Branch ${branchName} is safe to merge!`;\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { PipelineState } from '../types/github';\nimport { HelperInputs } from '../types/generated';\nimport { context as githubContext } from '@actions/github';\nimport { map } from 'bluebird';\nimport { octokit } from '../octokit';\n\nexport class SetCommitStatus extends HelperInputs {\n  sha = '';\n  context = '';\n  state = '';\n  description?: string;\n  target_url?: string;\n  skip_if_already_set?: string;\n}\n\nexport const setCommitStatus = async ({ sha, context, state, description, target_url, skip_if_already_set }: SetCommitStatus) => {\n  await map(context.split('\\n').filter(Boolean), async context => {\n    if (skip_if_already_set === 'true') {\n      const check_runs = await octokit.checks.listForRef({\n        ...githubContext.repo,\n        ref: sha\n      });\n      const run = check_runs.data.check_runs.find(({ name }) => name === context);\n      const runCompletedAndIsValid = run?.status === 'completed' && (run?.conclusion === 'failure' || run?.conclusion === 'success');\n      if (runCompletedAndIsValid) {\n        core.info(`${context} already completed with a ${run.conclusion} conclusion.`);\n        return;\n      }\n    }\n\n    octokit.repos.createCommitStatus({\n      sha,\n      context,\n      state: state as PipelineState,\n      description,\n      target_url,\n      ...githubContext.repo\n    });\n  });\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport * as fetch from '@adobe/node-fetch-retry';\nimport { getOctokit } from '@actions/github';\n\nconst githubToken = core.getInput('github_token', { required: true });\nexport const { rest: octokit, graphql: octokitGraphql } = getOctokit(githubToken, { request: { fetch } });\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport class HelperInputs {\n  helper?: string;\n  github_token?: string;\n  body?: string;\n  project_name?: string;\n  project_destination_column_name?: string;\n  note?: string;\n  project_origin_column_name?: string;\n  sha?: string;\n  context?: string;\n  state?: string;\n  description?: string;\n  target_url?: string;\n  environment?: string;\n  environment_url?: string;\n  label?: string;\n  labels?: string;\n  paths?: string;\n  ignore_globs?: string;\n  extensions?: string;\n  override_filter_paths?: string;\n  batches?: string;\n  pattern?: string;\n  teams?: string;\n  users?: string;\n  login?: string;\n  paths_no_filter?: string;\n  slack_webhook_url?: string;\n  number_of_assignees?: string;\n  number_of_reviewers?: string;\n  globs?: string;\n  override_filter_globs?: string;\n  title?: string;\n  seconds?: string;\n  pull_number?: string;\n  base?: string;\n  head?: string;\n  days?: string;\n  no_evict_upon_conflict?: string;\n  skip_if_already_set?: string;\n  delimiter?: string;\n  team?: string;\n  ignore_deleted?: string;\n  return_full_payload?: string;\n  skip_auto_merge?: string;\n  repo_name?: string;\n  repo_owner_name?: string;\n  load_balancing_sizes?: string;\n  required_review_overrides?: string;\n  max_queue_size?: string;\n  allow_only_for_maintainers?: string;\n  use_basic_matrix_configuration?: string;\n}\n","/*\nCopyright 2022 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { PullRequestList } from '../types/github';\nimport { octokit } from '../octokit';\nimport { context } from '@actions/github';\n\nexport const paginateAllOpenPullRequests = async (page = 1): Promise<PullRequestList> => {\n  const response = await octokit.pulls.list({\n    state: 'open',\n    sort: 'updated',\n    direction: 'desc',\n    per_page: 100,\n    page,\n    ...context.repo\n  });\n  if (!response.data.length) {\n    return [];\n  }\n  return response.data.concat(await paginateAllOpenPullRequests(page + 1));\n};\n"],"names":[],"sourceRoot":""}