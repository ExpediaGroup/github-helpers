{"version":3,"file":"180.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;;AAIA;AAMA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAMA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7GA;;;;;;;;;;;AAWA;;;;;;;;;;AAGA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AAGA;AAGA;AAIA;;;;;;;;;;;;;;;;;;ACtCA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;AClBA;;;;;;;;;;;AAWA;AAEA;AAoCA;;;;;;;;;;;;;;ACjDA;;;;;;;;;;;AAWA;;;;;;;;;;AAGA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA","sources":["webpack://github-helpers/./src/helpers/check-merge-safety.ts","webpack://github-helpers/./src/helpers/set-commit-status.ts","webpack://github-helpers/./src/octokit.ts","webpack://github-helpers/./src/types/generated.ts","webpack://github-helpers/./src/utils/paginate-open-pull-requests.ts"],"sourcesContent":["/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { HelperInputs } from '../types/generated';\nimport { context } from '@actions/github';\nimport { octokit } from '../octokit';\nimport micromatch from 'micromatch';\nimport * as core from '@actions/core';\nimport { PullRequest, SimplePullRequest } from '../types/github';\nimport { paginateAllOpenPullRequests } from '../utils/paginate-open-pull-requests';\nimport { map } from 'bluebird';\nimport { setCommitStatus } from './set-commit-status';\n\nexport class CheckMergeSafety extends HelperInputs {\n  paths?: string;\n  override_filter_paths?: string;\n  override_filter_globs?: string;\n}\n\nexport const checkMergeSafety = async (inputs: CheckMergeSafety) => {\n  const isPrWorkflow = Boolean(context.issue.number);\n  if (!isPrWorkflow) {\n    return handlePushWorkflow(inputs);\n  }\n  const { data: pullRequest } = await octokit.pulls.get({ pull_number: context.issue.number, ...context.repo });\n\n  const isSafeToMerge = await prIsSafeToMerge(pullRequest, inputs);\n\n  if (!isSafeToMerge) {\n    throw new Error();\n  }\n};\n\nconst handlePushWorkflow = async (inputs: CheckMergeSafety) => {\n  const pullRequests = await paginateAllOpenPullRequests();\n  return map(pullRequests, async pullRequest => {\n    const isSafeToMerge = await prIsSafeToMerge(pullRequest, inputs);\n    await setCommitStatus({\n      sha: pullRequest.head.sha,\n      state: isSafeToMerge ? 'success' : 'failure',\n      context: 'Merge Safety',\n      ...context.repo\n    });\n  });\n};\n\nconst prIsSafeToMerge = async (\n  pullRequest: SimplePullRequest | PullRequest,\n  { paths, override_filter_paths, override_filter_globs }: CheckMergeSafety\n) => {\n  const {\n    base: {\n      repo: { default_branch }\n    },\n    head: { ref }\n  } = pullRequest;\n  core.info(`ref: ${ref}`);\n  core.info(`default_branch: ${default_branch}`);\n  const {\n    data: { files: filesWhichBranchIsBehindOn }\n  } = await octokit.repos.compareCommitsWithBasehead({\n    ...context.repo,\n    basehead: `danadajian2:${ref}...origin:${default_branch}`\n  });\n  const fileNamesWhichBranchIsBehindOn = filesWhichBranchIsBehindOn?.map(file => file.filename) ?? [];\n  core.info(`fileNamesWhichBranchIsBehindOn: ${fileNamesWhichBranchIsBehindOn}`);\n\n  const shouldOverrideSafetyCheck = override_filter_globs\n    ? micromatch(fileNamesWhichBranchIsBehindOn, override_filter_globs.split('\\n')).length > 0\n    : fileNamesWhichBranchIsBehindOn.some(changedFile => override_filter_paths?.split(/[\\n,]/).includes(changedFile));\n\n  if (shouldOverrideSafetyCheck) {\n    core.error(\n      `This branch has one or more outdated files that must be rebased on! Please update \"${ref}\" with the \"${default_branch}\" branch.`\n    );\n    return false;\n  }\n\n  const {\n    data: { files: changedFiles }\n  } = await octokit.repos.compareCommitsWithBasehead({\n    ...context.repo,\n    basehead: `${default_branch}...${ref}`\n  });\n  const changedFileNames = changedFiles?.map(file => file.filename);\n  const projectDirectories = paths?.split(/[\\n,]/);\n  const isUnsafeToMerge = projectDirectories?.some(\n    dir => fileNamesWhichBranchIsBehindOn.some(file => file.includes(dir)) && changedFileNames?.some(file => file.includes(dir))\n  );\n\n  if (isUnsafeToMerge) {\n    core.error(\n      `This branch has one or more outdated projects which are being changed in this PR. Please update \"${ref}\" with the \"${default_branch}\" branch.`\n    );\n    return false;\n  }\n\n  core.info(`The PR from branch ${ref} is safe to merge!`);\n  return true;\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { PipelineState } from '../types/github';\nimport { HelperInputs } from '../types/generated';\nimport { context as githubContext } from '@actions/github';\nimport { map } from 'bluebird';\nimport { octokit } from '../octokit';\n\nexport class SetCommitStatus extends HelperInputs {\n  sha = '';\n  context = '';\n  state = '';\n  description?: string;\n  target_url?: string;\n}\n\nexport const setCommitStatus = async ({ sha, context, state, description, target_url }: SetCommitStatus) => {\n  await map(context.split('\\n').filter(Boolean), context =>\n    octokit.repos.createCommitStatus({\n      sha,\n      context,\n      state: state as PipelineState,\n      description,\n      target_url,\n      ...githubContext.repo\n    })\n  );\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport * as fetch from '@adobe/node-fetch-retry';\nimport { getOctokit } from '@actions/github';\n\nconst githubToken = core.getInput('github_token', { required: true });\nexport const { rest: octokit, graphql: octokitGraphql } = getOctokit(githubToken, { request: { fetch } });\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport class HelperInputs {\n  helper?: string;\n  github_token?: string;\n  body?: string;\n  project_name?: string;\n  project_destination_column_name?: string;\n  note?: string;\n  project_origin_column_name?: string;\n  sha?: string;\n  context?: string;\n  state?: string;\n  description?: string;\n  target_url?: string;\n  environment?: string;\n  environment_url?: string;\n  label?: string;\n  labels?: string;\n  paths?: string;\n  extensions?: string;\n  override_filter_paths?: string;\n  batches?: string;\n  pattern?: string;\n  teams?: string;\n  login?: string;\n  paths_no_filter?: string;\n  slack_webhook_url?: string;\n  number_of_assignees?: string;\n  globs?: string;\n  override_filter_globs?: string;\n  title?: string;\n  seconds?: string;\n  pull_number?: string;\n  base?: string;\n  head?: string;\n  days?: string;\n  no_evict_upon_conflict?: string;\n}\n","/*\nCopyright 2022 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { PullRequestList } from '../types/github';\nimport { octokit } from '../octokit';\nimport { context } from '@actions/github';\n\nexport const paginateAllOpenPullRequests = async (page = 1): Promise<PullRequestList> => {\n  const response = await octokit.pulls.list({\n    state: 'open',\n    sort: 'updated',\n    direction: 'desc',\n    per_page: 100,\n    page,\n    ...context.repo\n  });\n  if (!response.data.length) {\n    return [];\n  }\n  return response.data.concat(await paginateAllOpenPullRequests(page + 1));\n};\n"],"names":[],"sourceRoot":""}