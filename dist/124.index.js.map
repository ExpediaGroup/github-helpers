{"version":3,"file":"124.index.js","sources":["webpack://github-helpers/./src/helpers/create-project-card.ts","webpack://github-helpers/./src/octokit.ts","webpack://github-helpers/./src/utils/get-project-columns.ts"],"sourcesContent":["/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { SingleColumn, getDestinationColumn, getProjectColumns } from '../utils/get-project-columns';\nimport { context } from '@actions/github';\nimport { octokit } from '../octokit';\n\ninterface CreateProjectCardProps {\n  project_name: string;\n  project_destination_column_name: string;\n  note?: string;\n}\n\nexport const createProjectCard = async ({ project_name, project_destination_column_name, note }: CreateProjectCardProps) => {\n  const columnsList = await getProjectColumns({ project_name });\n\n  if (!columnsList?.data?.length) {\n    core.error(`There are no columns associated to ${project_name} project.`);\n    return;\n  }\n\n  const destinationColumn = getDestinationColumn(columnsList, project_destination_column_name);\n\n  if (!destinationColumn) {\n    core.info('No destination column was found');\n    return;\n  }\n  const cardParams = await generateCardParams(destinationColumn, note);\n\n  return octokit.projects.createCard(cardParams);\n};\n\nconst generateCardParams = async (filteredColumn: SingleColumn, note?: string) => {\n  const getResponse = await octokit.pulls.get({ pull_number: context.issue.number, ...context.repo });\n  const pullRequest = getResponse.data;\n  if (note) {\n    return {\n      column_id: filteredColumn?.id,\n      note,\n      ...context.repo,\n      headers: {\n        accept: 'application/vnd.github.v3+json'\n      }\n    };\n  }\n\n  return {\n    column_id: filteredColumn.id,\n    content_id: pullRequest.id,\n    content_type: 'PullRequest',\n    note,\n    ...context.repo,\n    headers: {\n      accept: 'application/vnd.github.v3+json'\n    }\n  };\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { Octokit } from '@octokit/rest';\nimport { getOctokit } from '@actions/github';\n\nconst githubToken = core.getInput('github_token', { required: true });\n\nexport const octokit = getOctokit(githubToken).rest as unknown as Octokit;\n\nexport const octokitWithPat = getOctokit(core.getInput('personal_access_token') || githubToken).rest as unknown as Octokit;\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ColumnListResponse, ProjectListResponse } from '../types';\nimport { context } from '@actions/github';\nimport { octokit } from '../octokit';\n\ninterface GetProjectColumns {\n  project_name: string;\n}\n\nexport interface SingleColumn {\n  url: string;\n  project_url: string;\n  cards_url: string;\n  id: number;\n  node_id: string;\n  name: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport const getProjectColumns = async ({ project_name }: GetProjectColumns) => {\n  const projectList = await octokit.projects.listForRepo({\n    state: 'open',\n    per_page: 100,\n    ...context.repo,\n    headers: {\n      accept: 'application/vnd.github.v3+json'\n    }\n  });\n  const project = findProjectToModify(projectList, project_name);\n\n  if (!project) {\n    return null;\n  }\n\n  return octokit.projects.listColumns({\n    project_id: project.id,\n    per_page: 100,\n    headers: {\n      accept: 'application/vnd.github.v3+json'\n    }\n  });\n};\n\nconst findProjectToModify = (projectsResponse: ProjectListResponse, project_name: string) =>\n  projectsResponse.data.find(project => project.name === project_name);\n\nexport const getDestinationColumn = (columns: ColumnListResponse, project_destination_column_name: string) =>\n  columns.data.find(column => column.name === project_destination_column_name);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AAQA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AAOA;AACA;AAEA;;;A;;;;;;;;;;;;;;ACnEA;;;;;;;;;;;AAWA;AAEA;AAEA;AAEA;AAEA;AAEA;;;A;;;;;;;;;;;;;ACrBA;;;;;;;;;;;AAWA;;;;;;;;;;AAGA;AACA;AAiBA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;A;;;A","sourceRoot":""}