{"version":3,"file":"654.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;ACtFA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;AClBA;;;;;;;;;;;AAWA;AAEA;AAwDA;;;;;;;;;;;;;;;ACrEA;;;;;;;;;;;AAWA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjCA;;;;;;;;;;;AAWA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././src/helpers/filter-paths.ts",".././src/octokit.ts",".././src/types/generated.ts",".././src/utils/merge-queue.ts",".././src/utils/paginate-all-branches.ts"],"sourcesContent":["/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { HelperInputs } from '../types/generated';\nimport { context } from '@actions/github';\nimport micromatch from 'micromatch';\nimport { octokit } from '../octokit';\nimport { getPrNumberFromMergeQueueRef } from '../utils/merge-queue';\nimport { ChangedFilesList } from '../types/github';\n\nexport class FilterPaths extends HelperInputs {\n  declare paths?: string;\n  declare globs?: string;\n  declare sha?: string;\n  declare packages?: string;\n  declare merge_queue_enabled?: string;\n}\n\nexport const filterPaths = async ({ paths, globs, sha, packages, merge_queue_enabled }: FilterPaths) => {\n  if (!paths && !globs && !packages) {\n    core.error('Must pass `globs` or `paths` or `packages` for filtering');\n    return false;\n  }\n\n  let pull_number: number;\n  if (context.eventName === 'merge_group') {\n    pull_number = getPrNumberFromMergeQueueRef();\n  } else if (sha && merge_queue_enabled === 'true') {\n    const branchesResult = sha\n      ? await octokit.repos.listBranchesForHeadCommit({\n          commit_sha: sha,\n          ...context.repo\n        })\n      : undefined;\n    const branchName = branchesResult?.data[0]?.name;\n    pull_number = getPrNumberFromMergeQueueRef(branchName);\n  } else if (sha) {\n    const listPrsResult = await octokit.repos.listPullRequestsAssociatedWithCommit({\n      commit_sha: sha,\n      ...context.repo\n    });\n    const prFromSha = listPrsResult?.data.find(Boolean);\n    if (!prFromSha) throw new Error(`No PR found for commit ${sha}`);\n    pull_number = prFromSha.number;\n  } else {\n    pull_number = context.issue.number;\n  }\n\n  const { data } = await octokit.pulls.listFiles({\n    per_page: 100,\n    pull_number,\n    ...context.repo\n  });\n\n  if (packages && hasRelevantPackageChanged(data, packages)) {\n    return true;\n  }\n\n  const fileNames = data.map(file => file.filename);\n  if (globs) {\n    if (paths) core.info('`paths` and `globs` inputs found, defaulting to use `globs` for filtering');\n    return micromatch(fileNames, globs.split('\\n')).length > 0;\n  } else if (paths) {\n    const filePaths = paths.split('\\n');\n    return fileNames.some(changedFile => filePaths.some(filePath => changedFile.startsWith(filePath)));\n  }\n};\n\nconst hasRelevantPackageChanged = (files: ChangedFilesList, packages: string) => {\n  const packageJson = files.find(file => file.filename === 'package.json');\n  if (!packageJson) {\n    return false;\n  }\n\n  return packages.split('\\n').some(pkg => new RegExp(`(-|\\\\+)\\\\s*\\\\\"${pkg}\\\\\"`).test(packageJson.patch ?? ''));\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport * as fetch from '@adobe/node-fetch-retry';\nimport { getOctokit } from '@actions/github';\n\nconst githubToken = core.getInput('github_token', { required: true });\nexport const { rest: octokit, graphql: octokitGraphql } = getOctokit(githubToken, { request: { fetch } });\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport class HelperInputs {\n  declare helper?: string;\n  declare github_token?: string;\n  declare body?: string;\n  declare project_name?: string;\n  declare project_destination_column_name?: string;\n  declare note?: string;\n  declare project_origin_column_name?: string;\n  declare sha?: string;\n  declare context?: string;\n  declare state?: string;\n  declare description?: string;\n  declare target_url?: string;\n  declare environment?: string;\n  declare environment_url?: string;\n  declare label?: string;\n  declare labels?: string;\n  declare paths?: string;\n  declare ignore_globs?: string;\n  declare override_filter_paths?: string;\n  declare batches?: string;\n  declare pattern?: string;\n  declare teams?: string;\n  declare users?: string;\n  declare login?: string;\n  declare paths_no_filter?: string;\n  declare slack_webhook_url?: string;\n  declare number_of_assignees?: string;\n  declare number_of_reviewers?: string;\n  declare globs?: string;\n  declare override_filter_globs?: string;\n  declare title?: string;\n  declare seconds?: string;\n  declare pull_number?: string;\n  declare base?: string;\n  declare head?: string;\n  declare days?: string;\n  declare no_evict_upon_conflict?: string;\n  declare skip_if_already_set?: string;\n  declare delimiter?: string;\n  declare team?: string;\n  declare ignore_deleted?: string;\n  declare return_full_payload?: string;\n  declare skip_auto_merge?: string;\n  declare repo_name?: string;\n  declare repo_owner_name?: string;\n  declare load_balancing_sizes?: string;\n  declare required_review_overrides?: string;\n  declare codeowners_overrides?: string;\n  declare max_queue_size?: string;\n  declare allow_only_for_maintainers?: string;\n  declare use_basic_matrix_configuration?: string;\n  declare merge_queue_enabled?: string;\n  declare packages?: string;\n  declare branch_name?: string;\n  declare commit_message?: string;\n}\n","/*\nCopyright 2022 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { paginateAllBranches } from './paginate-all-branches';\nimport { context } from '@actions/github';\n\nexport const getMergeQueueCommitHashes = async () => {\n  const branches = await paginateAllBranches();\n  const mergeQueueBranches = branches.filter(branch => branch.name.startsWith('gh-readonly-queue/'));\n  return mergeQueueBranches.map(branch => branch.commit.sha);\n};\n\nexport const getPrNumberFromMergeQueueRef = (ref = context.ref) => {\n  const prNumber = Number(\n    ref\n      .split('/')\n      .find(part => part.includes('pr-'))\n      ?.match(/\\d+/)?.[0]\n  );\n  if (isNaN(prNumber)) {\n    throw new Error('Could not find PR number in merge queue ref.');\n  }\n  return prNumber;\n};\n","/*\nCopyright 2022 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { PullRequestBranchesList } from '../types/github';\nimport { octokit } from '../octokit';\nimport { context } from '@actions/github';\n\nexport const paginateAllBranches = async ({\n  protectedBranches,\n  page = 1\n}: { protectedBranches?: boolean; page?: number } = {}): Promise<PullRequestBranchesList> => {\n  const response = await octokit.repos.listBranches({\n    protected: protectedBranches,\n    per_page: 100,\n    page,\n    ...context.repo\n  });\n  if (!response.data.length) {\n    return [];\n  }\n  return [...response.data, ...(await paginateAllBranches({ protectedBranches, page: page + 1 }))];\n};\n"],"names":[],"sourceRoot":""}