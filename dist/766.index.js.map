{"version":3,"file":"766.index.js","mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtDA;;;;;;;;;;;AAWA;AAEA;AACA;AAEA;AAEA;AACA","sources":["webpack://github-helpers/./src/helpers/rerun-pr-checks.ts","webpack://github-helpers/./src/octokit.ts"],"sourcesContent":["/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { context } from '@actions/github';\nimport { octokit } from '../octokit';\n\nexport const rerunPrChecks = async () => {\n  /** grab owner in case of fork branch */\n  const {\n    data: {\n      head: {\n        user: { login: owner },\n        sha: latestHash\n      },\n      base: { ref: branch }\n    }\n  } = await octokit.pulls.get({\n    pull_number: context.issue.number,\n    ...context.repo\n  });\n  const workflowRuns = await octokit.actions.listWorkflowRunsForRepo({\n    branch,\n    ...context.repo,\n    owner,\n    event: 'pull_request',\n    per_page: 100\n  });\n  if (!workflowRuns.data.workflow_runs.length) {\n    core.info(`No workflow runs found on branch ${branch} on ${owner}/${context.repo.repo}`);\n    return;\n  }\n  /** grab only latest occurrence of each workflow run */\n  const latestRuns = workflowRuns.data.workflow_runs.filter(({ head_sha }) => head_sha === latestHash);\n  core.info(`Found the ${latestRuns} latest runs on this branch, triggering reruns...`);\n  /** trigger a rerun for all of the latest runs on the branch */\n  latestRuns.forEach(async ({ id, name }) => {\n    core.info(`- Rerunning ${name}`);\n    await octokit.request('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun', {\n      owner,\n      repo: context.repo.repo,\n      run_id: id\n    });\n  });\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport * as fetch from '@adobe/node-fetch-retry';\nimport { Octokit } from '@octokit/rest';\nimport { getOctokit } from '@actions/github';\n\nconst githubToken = core.getInput('github_token', { required: true });\nexport const octokit = getOctokit(githubToken, { request: { fetch } }).rest as unknown as Octokit;\n"],"names":[],"sourceRoot":""}