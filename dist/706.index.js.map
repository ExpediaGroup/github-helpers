{"version":3,"file":"706.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAKA;AAJA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;ACnMA;;;;;;;;;;;AAWA;AAEA;AAsCA;;;;;;;;;;;;;;ACnDA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA","sources":["webpack://github-helpers/./src/helpers/backstage-export.ts","webpack://github-helpers/./src/types/generated.ts","webpack://github-helpers/./src/utils/get-backstage-entities.ts"],"sourcesContent":["/*\nCopyright 2022 Aurora Labs\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport * as glob from 'glob';\nimport { HelperInputs } from '../types/generated';\nimport { Entity, stringifyEntityRef, RELATION_OWNED_BY, RELATION_HAS_PART, parseEntityRef } from '@backstage/catalog-model';\nimport * as fs from 'fs';\n//import YAML from 'yaml';\nimport { simpleGit } from 'simple-git';\nimport handlebars from 'handlebars';\nimport { getBackstageEntities } from '../utils/get-backstage-entities';\n\ntype MultisigSigner = {\n  signer: Entity;\n  owner?: Entity;\n};\n\ntype MultisigInfo = {\n  entity: Entity;\n  signers: MultisigSigner[];\n};\n\ntype ComponentMultisigs = {\n  title: string;\n  component: Entity;\n  multisigs: MultisigInfo[];\n};\n\ntype SystemComponents = {\n  title: string;\n  system: Entity;\n  components: ComponentMultisigs[];\n};\n\nclass MultisigsCollector {\n  systemComponents: SystemComponents[] = [];\n  private entities: Entity[] = [];\n  private multisigs: Entity[] = [];\n\n  constructor(entities: Entity[]) {\n    this.entities = entities;\n    this.multisigs = this.entities.filter(item => item.kind === 'API' && item?.spec?.type === 'multisig-deployment');\n    this.systemComponents = this.collectSystems();\n  }\n\n  normalizeEntities(list: string[]) {\n    return [...new Set(list)].sort((a, b) => a.localeCompare(b));\n  }\n\n  collectSystems() {\n    const systemRefs = this.normalizeEntities(this.multisigs.map(item => item.spec!.system! as string));\n    return systemRefs\n      .map(systemRef => {\n        const system = this.entities.find(item => stringifyEntityRef(item) === systemRef)!;\n        const components = this.collectComponents(system);\n\n        return {\n          title: system.metadata.title || system.metadata.name,\n          system,\n          components\n        };\n      })\n      .sort((a, b) => a.system.metadata.name.localeCompare(b.system.metadata.name));\n  }\n\n  collectComponents(system: Entity) {\n    const componentRefs = system.relations!.filter(r => r.type === RELATION_HAS_PART && parseEntityRef(r.targetRef).kind === 'component');\n    return componentRefs\n      .map(componentRef => {\n        const component = this.entities.find(item => stringifyEntityRef(item) === componentRef.targetRef)!;\n        return {\n          title: component.metadata.title || component.metadata.name,\n          component,\n          multisigs: this.multisigs\n            .filter(item => item.relations!.some(r => r.type === 'apiProvidedBy' && r.targetRef === componentRef.targetRef))\n            .map(ms => ({\n              entity: ms,\n              signers: this.collectSigners(ms)\n            }))\n        };\n      })\n      .sort((a, b) => a.component.metadata.name.localeCompare(b.component.metadata.name));\n  }\n\n  collectSigners(multisig: Entity) {\n    return multisig\n      .relations!.filter(r => r.type === RELATION_OWNED_BY && parseEntityRef(r.targetRef).kind !== 'group')\n      .map(r => {\n        const signer = this.entities.find(e => stringifyEntityRef(e) === r.targetRef)!;\n        const owner = this.entities.find(e => stringifyEntityRef(e) === signer.spec!.owner)!;\n        return {\n          signer,\n          owner\n        };\n      })\n      .sort((a, b) => a.owner.metadata.name.localeCompare(b.owner.metadata.name));\n  }\n}\n\nexport class BackstageExport extends HelperInputs {\n  backstage_url?: string;\n  template_path?: string;\n  output_path?: string;\n  testing?: boolean;\n}\n\nfunction reexportTemplate(inputs: BackstageExport & { templatePath: string; templateData: {} }) {\n  const outputPath = inputs.output_path! + inputs.templatePath.replace(inputs.template_path!, '').replace('.hbs', '');\n\n  const compiledTemplate = handlebars.compile(fs.readFileSync(inputs.templatePath, { encoding: 'utf8' }), {\n    strict: true\n  });\n\n  const options = {\n    helpers: {\n      backstageLink: (entity: Entity) => {\n        if (!entity) return 'undefined';\n        const md = entity.metadata;\n        return `${inputs.backstage_url}/catalog/${md.namespace}/${entity.kind}/${md.name}`;\n      }\n    }\n  };\n\n  const compiledContent = compiledTemplate(inputs.templateData, options);\n\n  const existingContent =\n    fs.existsSync(outputPath) &&\n    fs.readFileSync(outputPath, {\n      encoding: 'utf-8'\n    });\n  if (compiledContent !== existingContent) {\n    core.info(`Writing ${outputPath}: changed content`);\n    fs.writeFileSync(outputPath, compiledContent);\n    return true;\n  }\n  return false;\n}\n\nasync function commitAndPushChanges(output_path: string) {\n  const git = simpleGit('.');\n  await git.addConfig('user.email', 'security@aurora.dev');\n  await git.addConfig('user.name', 'Backstage Exporter');\n  await git.add(output_path);\n  const msg = 'chore(backstage): 🥷🏽 automatic re-export';\n  await git.commit(msg, undefined);\n  await git.push();\n  core.info('Updated and pushed the changes');\n  return true;\n}\n\nexport const backstageExport = async ({ backstage_url, template_path, output_path, testing }: BackstageExport) => {\n  if (!template_path || !output_path) {\n    throw new Error('set template_path and output_path for handlebars templating');\n  }\n\n  const entities = await getBackstageEntities({ backstage_url });\n\n  const multisigsCollector = new MultisigsCollector(entities);\n\n  // console.log(JSON.stringify(multisigsCollector.systemComponents[0], null, 2));\n  const changedFiles = glob.sync(`${template_path}**/*.hbs`).reduce((acc, templatePath) => {\n    const templateData = {\n      multisigSystemComponents: multisigsCollector.systemComponents,\n      testing\n    };\n\n    if (reexportTemplate({ backstage_url, output_path, template_path, templatePath, templateData })) {\n      return [templatePath, ...acc];\n    }\n\n    return acc;\n  }, [] as string[]);\n\n  if (testing) {\n    core.info(`Testing mode: ${changedFiles.length} changed files, exiting`);\n    return true;\n  }\n\n  if (changedFiles.length === 0) {\n    core.info('No changed files, nothing to commit');\n    return false;\n  }\n\n  await commitAndPushChanges(output_path);\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport class HelperInputs {\n  helper?: string;\n  github_token?: string;\n  body?: string;\n  project_name?: string;\n  project_destination_column_name?: string;\n  note?: string;\n  project_origin_column_name?: string;\n  sha?: string;\n  context?: string;\n  state?: string;\n  description?: string;\n  target_url?: string;\n  environment?: string;\n  environment_url?: string;\n  label?: string;\n  labels?: string;\n  paths?: string;\n  extensions?: string;\n  override_filter_paths?: string;\n  batches?: string;\n  pattern?: string;\n  teams?: string;\n  login?: string;\n  paths_no_filter?: string;\n  slack_webhook_url?: string;\n  number_of_assignees?: string;\n  globs?: string;\n  override_filter_globs?: string;\n  title?: string;\n  seconds?: string;\n  pull_number?: string;\n  base?: string;\n  head?: string;\n  backstage_url?: string;\n  force_all_checks?: string;\n  template_path?: string;\n  output_path?: string;\n}\n","/*\nCopyright 2022 Aurora Labs\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { CatalogClient } from '@backstage/catalog-client';\n\ntype DiscoveryApi = {\n  getBaseUrl(pluginId: string): Promise<string>;\n};\n\ninterface GetBackstageEntities {\n  backstage_url?: string;\n}\n\nexport const getBackstageEntities = async ({ backstage_url }: GetBackstageEntities) => {\n  if (!backstage_url) {\n    throw new Error('BACKSTAGE_URL is required, make sure to set the secret');\n  }\n\n  core.info('Connecting to Backstage to fetch available entities');\n\n  const discoveryApi: DiscoveryApi = {\n    async getBaseUrl() {\n      return `${backstage_url}/api/catalog`;\n    }\n  };\n  const catalogClient = new CatalogClient({\n    discoveryApi\n  });\n\n  const entities = await catalogClient.getEntities({});\n  core.info(`Total backstage entities: ${entities.items.length}`);\n\n  return entities.items;\n};\n"],"names":[],"sourceRoot":""}