{"version":3,"file":"154.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;AC5CA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACtDA;;;;;;;;;;;AAWA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;ACjBA;AACA;AAEA;AAOA;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sources":["webpack://github-helpers/./src/utils/notify-reviewer.ts","webpack://github-helpers/./src/helpers/assign-pr-reviewers.ts","webpack://github-helpers/./src/octokit.ts","webpack://github-helpers/./src/utils/get-changed-filepaths.ts","webpack://github-helpers/./src/utils/get-core-member-logins.ts"],"sourcesContent":["/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport axios from 'axios';\nimport { context } from '@actions/github';\nimport { octokit } from '../octokit';\n\ninterface NotifyReviewer {\n  login: string;\n  pull_number: number;\n  slack_webhook_url: string;\n}\n\nexport const notifyReviewer = async ({ login, pull_number, slack_webhook_url }: NotifyReviewer) => {\n  const assigneeResponse = await octokit.users.getByUsername({ username: login });\n  const assigneeEmail = assigneeResponse.data.email;\n  if (!assigneeEmail) {\n    core.setFailed(\n      `No github email found for user ${login}. Ensure you have set your email to be publicly visible on your Github profile.`\n    );\n    throw new Error();\n  }\n  const pullRequestResponse = await octokit.pulls.get({ pull_number, ...context.repo });\n  const { title, html_url } = pullRequestResponse.data;\n\n  const slackResponse = await axios.post(slack_webhook_url, {\n    assignee: assigneeEmail,\n    title,\n    html_url,\n    repo: context.repo.repo\n  });\n\n  return slackResponse.data;\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { context } from '@actions/github';\nimport { getCoreMemberLogins } from '../utils/get-core-member-logins';\nimport { map } from 'bluebird';\nimport { notifyReviewer } from '../utils/notify-reviewer';\nimport { octokit } from '../octokit';\nimport { sampleSize } from 'lodash';\n\ninterface AssignPrReviewer {\n  teams?: string;\n  login?: string;\n  number_of_assignees?: string;\n  slack_webhook_url?: string;\n}\n\nexport const assignPrReviewers = async ({ teams, login, number_of_assignees = '1', slack_webhook_url }: AssignPrReviewer) => {\n  const coreMemberLogins = await getCoreMemberLogins(context.issue.number, teams?.split('\\n'));\n\n  if (login && coreMemberLogins.includes(login)) {\n    core.info('Already a core member, no need to assign.');\n    return;\n  }\n  const assignees = sampleSize(coreMemberLogins, Number(number_of_assignees));\n\n  return octokit.issues\n    .addAssignees({\n      assignees,\n      issue_number: context.issue.number,\n      ...context.repo\n    })\n    .then(() => {\n      if (slack_webhook_url) {\n        return map(assignees, assignee =>\n          notifyReviewer({\n            login: assignee,\n            pull_number: context.issue.number,\n            slack_webhook_url\n          })\n        );\n      }\n    });\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { Octokit } from '@octokit/rest';\nimport { getOctokit } from '@actions/github';\n\nexport const octokit = getOctokit(core.getInput('github_token', { required: true })).rest as unknown as Octokit;\n","import { context } from '@actions/github';\nimport { octokit } from '../octokit';\n\nexport const getChangedFilepaths = (pull_number: number) =>\n  octokit.pulls\n    .listFiles({\n      pull_number,\n      per_page: 100,\n      ...context.repo\n    })\n    .then(listFilesResponse => listFilesResponse.data.map(file => file.filename));\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { CodeOwnersEntry, loadOwners, matchFile } from 'codeowners-utils';\nimport { union, uniq } from 'lodash';\nimport { context } from '@actions/github';\nimport { getChangedFilepaths } from './get-changed-filepaths';\nimport { map } from 'bluebird';\nimport { octokit } from '../octokit';\n\nexport const getCoreMemberLogins = async (pull_number: number, teams?: string[]) => {\n  const codeOwners = teams ?? (await getCodeOwners(pull_number));\n\n  if (!codeOwners?.length) {\n    core.setFailed('No code owners found.');\n    throw new Error();\n  }\n\n  const adminLogins = await map(codeOwners, team =>\n    octokit.teams\n      .listMembersInOrg({\n        org: context.repo.owner,\n        team_slug: team,\n        per_page: 100\n      })\n      .then(listMembersResponse => listMembersResponse.data.map(member => member.login))\n  );\n  return union(...adminLogins);\n};\n\nconst getCodeOwners = async (pull_number: number) => {\n  const codeOwners = (await loadOwners(process.cwd())) ?? [];\n  const changedFilePaths = await getChangedFilepaths(pull_number);\n  const matchingCodeOwners = changedFilePaths.map(filePath => matchFile(filePath, codeOwners) ?? ({} as CodeOwnersEntry));\n  return uniq(\n    matchingCodeOwners\n      .map(owner => owner.owners)\n      .flat()\n      .filter(Boolean)\n      .map(owner => owner.substring(owner.indexOf('/') + 1))\n  );\n};\n"],"names":[],"sourceRoot":""}