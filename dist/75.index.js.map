{"version":3,"file":"75.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnGA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;AC1HA;;;;;;;;;;;AAWA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;ACnBA;;;;;;;;;;;AAWA;AAEA;AAqCA;;;;;;;;;;;;;;AClDA;;;;;;;;;;;AAWA;;;;;;;;;;AAEA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA","sources":["webpack://github-helpers/./src/utils/get-changed-files.ts","webpack://github-helpers/./src/helpers/generate-component-matrix.ts","webpack://github-helpers/./src/octokit.ts","webpack://github-helpers/./src/types/generated.ts","webpack://github-helpers/./src/utils/get-backstage-entities.ts"],"sourcesContent":["import * as github from '@actions/github';\nimport * as core from '@actions/core';\nimport { octokit } from '../octokit';\n\nexport enum ChangeType {\n  add,\n  edit,\n  delete,\n  any\n}\n\nexport interface Change {\n  file: string;\n  changeType: ChangeType;\n  patch: string;\n}\n\nexport async function getChangedFiles(eventName: string | undefined): Promise<Change[]> {\n  if (!eventName) {\n    return [];\n  }\n\n  switch (eventName) {\n    case 'push':\n      return getChangesFromSha();\n    default:\n      return getChangesFromPR();\n  }\n}\n\nasync function getChangesFromSha(): Promise<Change[]> {\n  const beforeSha = github.context.payload.before;\n  const afterSha = github.context.payload.after;\n  const owner = github.context.payload.repository?.owner?.name;\n  const repo = github.context.payload.repository?.name;\n\n  if (!beforeSha || !afterSha || !repo || !owner) {\n    return [];\n  }\n\n  const changedFiles = await octokit.repos.compareCommits({\n    owner,\n    repo,\n    base: beforeSha,\n    head: afterSha,\n    mediaType: { format: 'sha' }\n  });\n\n  const changes: Change[] = changedFiles.data.files!.map(f => ({\n    file: f.filename,\n    changeType: parseStatus(f.status),\n    patch: f.patch!\n  }));\n\n  core.debug('found changed files:');\n  for (const change of changes) {\n    core.debug(`  ${change.file}`);\n  }\n\n  return changes;\n}\n\nasync function getChangesFromPR(): Promise<Change[]> {\n  const pullRequest = github.context.payload.pull_request;\n  if (!pullRequest) {\n    return [];\n  }\n\n  const listFilesResponse = await octokit.pulls.listFiles({\n    owner: github.context.repo.owner,\n    repo: github.context.repo.repo,\n    pull_number: pullRequest.number\n  });\n\n  const changes = listFilesResponse.data.map(f => ({\n    file: f.filename,\n    changeType: parseStatus(f.status),\n    patch: f.patch!\n  }));\n\n  core.debug('found changed files:');\n  for (const change of changes) {\n    core.debug(`  ${change.file}`);\n  }\n\n  return changes;\n}\n\nfunction parseStatus(status: string): ChangeType {\n  switch (status) {\n    case 'added':\n      return ChangeType.add;\n    case 'removed':\n      return ChangeType.delete;\n    case 'modified':\n      return ChangeType.edit;\n    default:\n      return ChangeType.edit;\n  }\n}\n","/*\nCopyright 2022 Aurora Labs\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { HelperInputs } from '../types/generated';\nimport { context } from '@actions/github';\nimport { getChangedFiles } from '../utils/get-changed-files';\nimport { Entity } from '@backstage/catalog-model';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { getBackstageEntities } from '../utils/get-backstage-entities';\n\nexport class GenerateComponentMatrix extends HelperInputs {\n  backstage_url?: string;\n}\n\nfunction sourceLocation(entity: Entity) {\n  if (!entity.metadata.annotations) return;\n  const loc = entity.metadata.annotations['backstage.io/source-location'];\n  return loc;\n}\n\nfunction sourceLocationDir(entity: Entity) {\n  const loc = sourceLocation(entity)!;\n  return loc.split('/').slice(7, -1).join('/');\n}\n\n/**\n * Finds the first parent directory that contains rootFile.\n * If the rootFile is not found, returns ./\n */\nfunction findRoot(fileName: string, rootFile: string) {\n  const dirs = fileName.split('/');\n  core.info(`searching ${rootFile} for ${fileName}`);\n\n  for (;;) {\n    const testFile = path.join('./', ...dirs, rootFile);\n    core.info(`checking: ${testFile}`);\n    if (fs.existsSync(testFile)) {\n      core.info(`Found ${rootFile} root for ${fileName}:`);\n      core.info(dirs.join('/'));\n      break;\n    }\n    if (dirs.length === 0) {\n      core.info(`Unable to find ${rootFile} for ${fileName}, using the default`);\n      break;\n    }\n    // eslint-disable-next-line functional/immutable-data\n    dirs.pop();\n  }\n  return dirs.length > 0 ? dirs.join('/') : '.';\n}\n\nexport const generateComponentMatrix = async ({ backstage_url }: GenerateComponentMatrix) => {\n  const entities = await getBackstageEntities({ backstage_url });\n  const repoUrl = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}`;\n\n  const componentItems = entities\n    .filter(item => sourceLocation(item)?.startsWith(`url:${repoUrl}/`))\n    .filter(item => item.kind === 'Component');\n\n  const componentItemNames = componentItems.map(item => item.metadata.name);\n\n  core.info(`Component entities in this repo: ${componentItems.length} (${componentItemNames})`);\n\n  const eventName = process.env.GITHUB_EVENT_NAME;\n  const changedFiles = await getChangedFiles(eventName);\n\n  core.info(`Changed files count: ${changedFiles.length}`);\n\n  const changedComponents = componentItems.filter(item =>\n    changedFiles.some(file => {\n      const loc = sourceLocation(item)!;\n      return file.file.startsWith(loc);\n    })\n  );\n\n  core.info(`Changed components: ${Object.keys(changedComponents).length} ({${Object.keys(changedComponents)}})`);\n\n  const forceAll = eventName !== 'pull_request';\n  if (forceAll) core.info('forcing CI runs for all components (not a pull request)');\n\n  core.info('Generating component matrix...');\n\n  const matrix = {\n    include: componentItems.map(item => {\n      const isSolidity = ['ethereum', 'aurora'].some(tag => item.metadata.tags!.includes(tag));\n      const isRust = item.metadata.tags!.includes('near');\n\n      const goRoot = findRoot(sourceLocationDir(item)!, 'go.mod');\n      const isGo = !!goRoot;\n\n      const runSlither = isSolidity && (forceAll || changedComponents.includes(item));\n      const runClippy = isRust && (forceAll || changedComponents.includes(item));\n      const runGoStaticChecks = isGo && (forceAll || changedComponents.includes(item));\n\n      return {\n        name: item.metadata.name,\n        tags: item.metadata.tags,\n        path: sourceLocationDir(item),\n        nodeRoot: findRoot(sourceLocationDir(item)!, 'package.json'),\n        goRoot,\n        runSlither,\n        runClippy,\n        runGoStaticChecks\n      };\n    })\n  };\n\n  core.info(JSON.stringify(matrix, null, 2));\n\n  return matrix;\n};\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport * as fetch from '@adobe/node-fetch-retry';\nimport { Octokit } from '@octokit/rest';\nimport { getOctokit } from '@actions/github';\n\nconst githubToken = core.getInput('github_token', { required: true });\nexport const octokit = getOctokit(githubToken, { request: { fetch } }).rest as unknown as Octokit;\n","/*\nCopyright 2021 Expedia, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport class HelperInputs {\n  helper?: string;\n  github_token?: string;\n  body?: string;\n  project_name?: string;\n  project_destination_column_name?: string;\n  note?: string;\n  project_origin_column_name?: string;\n  sha?: string;\n  context?: string;\n  state?: string;\n  description?: string;\n  target_url?: string;\n  environment?: string;\n  environment_url?: string;\n  label?: string;\n  labels?: string;\n  paths?: string;\n  extensions?: string;\n  override_filter_paths?: string;\n  batches?: string;\n  pattern?: string;\n  teams?: string;\n  login?: string;\n  paths_no_filter?: string;\n  slack_webhook_url?: string;\n  number_of_assignees?: string;\n  globs?: string;\n  override_filter_globs?: string;\n  title?: string;\n  seconds?: string;\n  pull_number?: string;\n  base?: string;\n  head?: string;\n  backstage_url?: string;\n  template_path?: string;\n  output_path?: string;\n}\n","/*\nCopyright 2022 Aurora Labs\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as core from '@actions/core';\nimport { CatalogClient } from '@backstage/catalog-client';\n\ntype DiscoveryApi = {\n  getBaseUrl(pluginId: string): Promise<string>;\n};\n\ninterface GetBackstageEntities {\n  backstage_url?: string;\n}\n\nexport const getBackstageEntities = async ({ backstage_url }: GetBackstageEntities) => {\n  if (!backstage_url) {\n    throw new Error('BACKSTAGE_URL is required, make sure to set the secret');\n  }\n\n  core.info('Connecting to Backstage to fetch available entities');\n\n  const discoveryApi: DiscoveryApi = {\n    async getBaseUrl() {\n      return `${backstage_url}/api/catalog`;\n    }\n  };\n  const catalogClient = new CatalogClient({\n    discoveryApi\n  });\n\n  const entities = await catalogClient.getEntities({});\n  core.info(`Total backstage entities: ${entities.items.length}`);\n\n  return entities.items;\n};\n"],"names":[],"sourceRoot":""}